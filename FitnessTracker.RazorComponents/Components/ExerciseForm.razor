@using FitnessTracker.RazorComponents.Models
@using FitnessTracker.RazorComponents.Services
@inject MongoDBService MongoDBService

<EditForm Model="@Exercise" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Exercise Name:</label>
        <InputText id="name" @bind-Value="Exercise.Name" class="form-control" required />
        <ValidationMessage For="@(() => Exercise.Name)" />
    </div>
    
    <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <InputTextArea id="description" @bind-Value="Exercise.Description" class="form-control" rows="3" />
        <ValidationMessage For="@(() => Exercise.Description)" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category:</label>
        <InputSelect id="category" @bind-Value="Exercise.Category" class="form-select">
            <option value="">Select a category</option>
            <option value="Strength">Strength</option>
            <option value="Cardio">Cardio</option>
            <option value="Flexibility">Flexibility</option>
        </InputSelect>
        <ValidationMessage For="@(() => Exercise.Category)" />
    </div>

    <div class="mb-3">
        <label for="muscleGroup" class="form-label">Primary Muscle Group:</label>
        <InputSelect id="muscleGroup" @bind-Value="Exercise.MuscleGroup" class="form-select">
            <option value="">Select a muscle group</option>
            <option value="Chest">Chest</option>
            <option value="Back">Back</option>
            <option value="Shoulders">Shoulders</option>
            <option value="Arms">Arms</option>
            <option value="Legs">Legs</option>
            <option value="Core">Core</option>
            <option value="Full Body">Full Body</option>
        </InputSelect>
        <ValidationMessage For="@(() => Exercise.MuscleGroup)" />
    </div>

    <div class="mb-3">
        <label for="youtubeLink" class="form-label">YouTube Tutorial Link:</label>
        <InputText id="youtubeLink" @bind-Value="Exercise.YoutubeLink" class="form-control" placeholder="https://www.youtube.com/watch?v=..." />
        <ValidationMessage For="@(() => Exercise.YoutubeLink)" />
        @if (!string.IsNullOrWhiteSpace(Exercise.YoutubeLink))
        {
            <div class="mt-2">
                <iframe width="100%" height="315"
                        src="@GetEmbedUrl(Exercise.YoutubeLink)"
                        title="YouTube video player"
                        frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen></iframe>
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="equipment" class="form-label">Required Equipment:</label>
        <div class="d-flex mb-2">
            <InputText id="newEquipment" @bind-Value="newEquipmentItem" class="form-control me-2" placeholder="Add equipment item..." />
            <button type="button" class="btn btn-outline-primary" @onclick="AddEquipmentItem">Add</button>
        </div>
        @if (Exercise.RequiredEquipment.Any())
        {
            <ul class="list-group">
                @foreach (var item in Exercise.RequiredEquipment)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @item
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveEquipmentItem(item)">Remove</button>
                    </li>
                }
            </ul>
        }
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox id="isCustom" @bind-Value="Exercise.IsCustom" class="form-check-input" />
        <label class="form-check-label" for="isCustom">Custom Exercise</label>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">Save Exercise</button>
        <button type="button" class="btn btn-outline-secondary ms-2" @onclick="CancelEdit">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Exercise Exercise { get; set; } = new Exercise();
    
    [Parameter]
    public EventCallback<Exercise> OnSaved { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    private string newEquipmentItem = string.Empty;
    
    private string GetEmbedUrl(string youtubeUrl)
    {
        if (string.IsNullOrWhiteSpace(youtubeUrl))
            return string.Empty;
            
        // Handle formats like https://www.youtube.com/watch?v=VIDEO_ID
        if (youtubeUrl.Contains("youtube.com/watch"))
        {
            var uri = new Uri(youtubeUrl);
            var query = uri.Query;
            
            // Simple manual parsing of the v parameter
            if (query.Contains("v="))
            {
                int startIndex = query.IndexOf("v=") + 2;
                int endIndex = query.IndexOf('&', startIndex);
                string videoId = endIndex > startIndex 
                    ? query.Substring(startIndex, endIndex - startIndex) 
                    : query.Substring(startIndex);
                
                return $"https://www.youtube.com/embed/{videoId}";
            }
        }
        
        // Handle formats like https://youtu.be/VIDEO_ID
        if (youtubeUrl.Contains("youtu.be"))
        {
            var uri = new Uri(youtubeUrl);
            var videoId = uri.AbsolutePath.TrimStart('/');
            if (!string.IsNullOrEmpty(videoId))
                return $"https://www.youtube.com/embed/{videoId}";
        }
        
        // If we couldn't parse it, just return the original URL
        return youtubeUrl;
    }
    
    private void AddEquipmentItem()
    {
        if (!string.IsNullOrWhiteSpace(newEquipmentItem) && 
            !Exercise.RequiredEquipment.Contains(newEquipmentItem))
        {
            Exercise.RequiredEquipment.Add(newEquipmentItem);
            newEquipmentItem = string.Empty;
        }
    }
    
    private void RemoveEquipmentItem(string item)
    {
        Exercise.RequiredEquipment.Remove(item);
    }
    
    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Exercise.Id) || Exercise.Id == MongoDB.Bson.ObjectId.Empty.ToString())
        {
            Exercise.Id = MongoDB.Bson.ObjectId.GenerateNewId().ToString();
            await MongoDBService.CreateExerciseAsync(Exercise);
        }
        else
        {
            await MongoDBService.UpdateExerciseAsync(Exercise.Id, Exercise);
        }
        
        await OnSaved.InvokeAsync(Exercise);
    }
    
    private async Task CancelEdit()
    {
        await OnCancel.InvokeAsync();
    }
}
