@page "/workouts"
@using FitnessTracker.RazorComponents.Models
@using FitnessTracker.RazorComponents.Services
@using FitnessTracker.RazorComponents.Components
@inject MongoDBService MongoDBService

<PageTitle>Workouts - Fitness Tracker</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>Workouts</h1>
            <p class="lead">Track and manage your workout sessions</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Calendar</h3>
                </div>
                <div class="card-body">
                    <CalendarView />
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h3>Workout Stats</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="fw-bold">This Month</div>
                        <div class="d-flex justify-content-between">
                            <div>Total Workouts:</div>
                            <div>@(workoutLogs?.Count ?? 0)</div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div>Total Time:</div>
                            <div>@(workoutLogs?.Sum(w => w.DurationMinutes) ?? 0) minutes</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3>@(selectedWorkout == null ? "Workout Log" : (selectedWorkout.Id == null ? "New Workout" : "Edit Workout"))</h3>
                    @if (selectedWorkout == null)
                    {
                        <button class="btn btn-primary" @onclick="() => CreateNewWorkout()">New Workout</button>
                    }
                </div>
                <div class="card-body">
                    @if (selectedWorkout == null)
                    {
                        @if (workoutLogs == null)
                        {
                            <div class="text-center p-3">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!workoutLogs.Any())
                        {
                            <div class="text-center p-4">
                                <div class="mb-3">No workout logs found.</div>
                                <button class="btn btn-outline-primary" @onclick="() => CreateNewWorkout()">Log Your First Workout</button>
                            </div>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var workout in workoutLogs.OrderByDescending(w => w.Date))
                                {
                                    <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" 
                                            @onclick="() => EditWorkout(workout)">
                                        <div>
                                            <div class="fw-bold">@workout.Date.ToShortDateString()</div>
                                            <div class="small">
                                                @(string.IsNullOrEmpty(workout.Title) ? $"{workout.ExerciseEntries.Count} exercises" : workout.Title)
                                                â€¢ @workout.DurationMinutes min
                                            </div>
                                        </div>
                                        <span class="badge bg-primary rounded-pill">@workout.ExerciseEntries.Count</span>
                                    </button>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <WorkoutForm WorkoutLog="selectedWorkout" OnSaved="HandleWorkoutSaved" OnCancel="HandleWorkoutCancel" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<WorkoutLog> workoutLogs = new();
    private WorkoutLog? selectedWorkout;
    
    // Hardcoded user ID for now - would be replaced with auth system
    private string currentUserId = "user123";

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkoutLogs();
    }

    private async Task LoadWorkoutLogs()
    {
        // Get workouts for the current user
        workoutLogs = await MongoDBService.GetWorkoutLogsAsync(currentUserId);
    }

    private void CreateNewWorkout()
    {
        selectedWorkout = new WorkoutLog
        {
            Date = DateTime.Today,
            UserId = currentUserId
        };
    }

    private void EditWorkout(WorkoutLog workout)
    {
        selectedWorkout = workout;
    }

    private async Task DeleteWorkout(string id)
    {
        // Add delete functionality if needed
        await LoadWorkoutLogs();
    }

    private async Task HandleWorkoutSaved(WorkoutLog workout)
    {
        selectedWorkout = null;
        await LoadWorkoutLogs();
    }

    private void HandleWorkoutCancel()
    {
        selectedWorkout = null;
    }
}
