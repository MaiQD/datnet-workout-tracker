@page "/"
@using FitnessTracker.RazorComponents.Models
@using FitnessTracker.RazorComponents.Services
@using FitnessTracker.RazorComponents.Components
@inject MongoDBService MongoDBService

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>Fitness Tracker</h1>
            <p class="lead">Track your workouts on the go!</p>
        </div>
    </div>

    <div class="mb-4">
        <div class="card">
            <div class="card-header">
                <h3>Calendar View</h3>
            </div>
            <div class="card-body">
                <CalendarView />
            </div>
        </div>
    </div>
    
    <div class="mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Exercises</h3>
                @if (selectedExercise == null)
                {
                    <button class="btn btn-primary" @onclick="() => CreateNewExercise()">Add New</button>
                }
            </div>
            <div class="card-body">
                @if (selectedExercise == null)
                {
                    @if (exercises == null)
                    {
                        <div class="text-center p-3">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!exercises.Any())
                    {
                        <div class="text-center p-4">
                            <div class="mb-3">No exercises found.</div>
                            <button class="btn btn-outline-primary" @onclick="() => CreateNewExercise()">Add Your First Exercise</button>
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var exercise in exercises)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@exercise.Name</strong>
                                        <div class="small text-muted">@exercise.Category • @exercise.MuscleGroup</div>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditExercise(exercise)">Edit</button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteExercise(exercise)">Delete</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <button class="btn btn-outline-secondary mb-3" @onclick="HandleExerciseCancel">
                        <span class="oi oi-arrow-left"></span> Back to List
                    </button>
                    <h4>@(string.IsNullOrEmpty(selectedExercise.Id) || selectedExercise.Id == MongoDB.Bson.ObjectId.Empty.ToString() ? "Add New Exercise" : "Edit Exercise")</h4>
                    <ExerciseForm Exercise="selectedExercise" OnSaved="HandleExerciseSaved" OnCancel="HandleExerciseCancel" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Exercise> exercises;
    private Exercise selectedExercise;

    protected override async Task OnInitializedAsync()
    {
        await LoadExercises();
    }

    private async Task LoadExercises()
    {
        exercises = await MongoDBService.GetExercisesAsync();
    }

    private void CreateNewExercise()
    {
        selectedExercise = new Exercise();
    }

    private void EditExercise(Exercise exercise)
    {
        selectedExercise = exercise;
    }

    private async Task DeleteExercise(Exercise exercise)
    {
        await MongoDBService.DeleteExerciseAsync(exercise.Id);
        await LoadExercises();
    }

    private async Task HandleExerciseSaved(Exercise exercise)
    {
        selectedExercise = null;
        await LoadExercises();
    }

    private void HandleExerciseCancel()
    {
        selectedExercise = null;
    }
}
