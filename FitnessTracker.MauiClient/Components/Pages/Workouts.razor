@page "/workouts"
@using FitnessTracker.RazorComponents.Models
@using FitnessTracker.RazorComponents.Services
@using FitnessTracker.RazorComponents.Components
@inject MongoDBService MongoDBService

<div class="container">
    <h1>Workouts</h1>
    <p class="lead">Track your workout progress</p>

    <div class="mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>@(selectedWorkout == null ? "Workout Log" : (selectedWorkout.Id == null ? "New Workout" : "Edit Workout"))</h3>
                @if (selectedWorkout == null)
                {
                    <button class="btn btn-primary" @onclick="() => CreateNewWorkout()">New</button>
                }
            </div>
            <div class="card-body">
                @if (selectedWorkout == null)
                {
                    @if (workoutLogs == null)
                    {
                        <div class="text-center p-3">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!workoutLogs.Any())
                    {
                        <div class="text-center p-4">
                            <div class="mb-3">No workout logs found.</div>
                            <button class="btn btn-outline-primary" @onclick="() => CreateNewWorkout()">Log Your First Workout</button>
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var workout in workoutLogs.OrderByDescending(w => w.Date))
                            {
                                <button class="list-group-item list-group-item-action" 
                                        @onclick="() => EditWorkout(workout)">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@workout.Date.ToString("MMM d, yyyy")</h6>
                                        <small>@workout.DurationMinutes min</small>
                                    </div>
                                    <p class="mb-1">@workout.ExerciseEntries.Count exercises</p>
                                    @if (!string.IsNullOrEmpty(workout.Notes))
                                    {
                                        <small class="text-muted text-truncate d-block">@workout.Notes</small>
                                    }
                                </button>
                            }
                        </div>
                    }
                }
                else
                {
                    <WorkoutForm WorkoutLog="selectedWorkout" OnSaved="HandleWorkoutSaved" OnCancel="HandleWorkoutCancel" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<WorkoutLog> workoutLogs;
    private WorkoutLog selectedWorkout;
    
    // Hardcoded user ID for now - would be replaced with auth system
    private string currentUserId = "user123";

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkoutLogs();
    }

    private async Task LoadWorkoutLogs()
    {
        try
        {
            // Get workouts for the current user
            workoutLogs = await MongoDBService.GetWorkoutLogsAsync(currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
            workoutLogs = new List<WorkoutLog>();
        }
    }

    private void CreateNewWorkout()
    {
        selectedWorkout = new WorkoutLog
        {
            Date = DateTime.Today,
            UserId = currentUserId
        };
    }

    private void EditWorkout(WorkoutLog workout)
    {
        selectedWorkout = workout;
    }

    private async Task HandleWorkoutSaved(WorkoutLog workout)
    {
        selectedWorkout = null;
        await LoadWorkoutLogs();
    }

    private void HandleWorkoutCancel()
    {
        selectedWorkout = null;
    }
}
