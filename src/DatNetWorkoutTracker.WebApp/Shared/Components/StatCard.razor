@* Modern Stat Card Component for metrics display *@

<div class="stat-card @GetVariantClass() @CssClass" style="@Style">
    <div class="stat-card-icon @GetIconVariantClass()">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <span class="oi oi-@Icon"></span>
        }
        else
        {
            @IconTemplate
        }
    </div>
    
    <div class="stat-card-content">
        <div class="stat-value @GetValueSizeClass()">@Value</div>
        <div class="stat-label">@Label</div>
        
        @if (!string.IsNullOrEmpty(Change) || ChangeTemplate != null)
        {
            <div class="stat-change @GetChangeClass()">
                @if (ChangeTemplate != null)
                {
                    @ChangeTemplate
                }
                else
                {
                    <span class="change-icon oi oi-@GetChangeIcon()"></span>
                    <span class="change-text">@Change</span>
                }
            </div>
        }
        
        @if (SubMetrics != null && SubMetrics.Any())
        {
            <div class="stat-sub-metrics">
                @foreach (var metric in SubMetrics)
                {
                    <div class="sub-metric">
                        <span class="sub-metric-label">@metric.Label:</span>
                        <span class="sub-metric-value">@metric.Value</span>
                    </div>
                }
            </div>
        }
    </div>
    
    @if (ActionTemplate != null)
    {
        <div class="stat-card-action">
            @ActionTemplate
        </div>
    }
</div>

<style>
    .stat-card {
        background: var(--card-bg);
        border-radius: var(--radius-xl);
        padding: var(--space-6);
        box-shadow: var(--card-shadow);
        border: 1px solid var(--border);
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        gap: var(--space-4);
        height: 100%;
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(232, 69, 69, 0.03) 100%);
        pointer-events: none;
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--card-shadow-hover);
    }

    .stat-card.elevated {
        box-shadow: var(--card-shadow-lg);
    }

    .stat-card.elevated:hover {
        transform: translateY(-6px);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }

    .stat-card.gradient {
        background: var(--gradient-primary);
        color: white;
        border: none;
    }

    .stat-card.gradient::before {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
    }

    .stat-card.compact {
        padding: var(--space-4);
        flex-direction: column;
        text-align: center;
    }

    .stat-card.horizontal {
        flex-direction: row;
    }

    .stat-card.vertical {
        flex-direction: column;
        text-align: center;
    }

    /* Icon Styles */
    .stat-card-icon {
        width: 64px;
        height: 64px;
        border-radius: var(--radius-xl);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
        flex-shrink: 0;
        position: relative;
        z-index: 1;
    }

    .stat-card.compact .stat-card-icon {
        width: 48px;
        height: 48px;
        font-size: 1.25rem;
        margin-bottom: var(--space-3);
    }

    .stat-card.vertical .stat-card-icon {
        margin-bottom: var(--space-4);
    }

    .icon-primary { background: var(--gradient-primary); }
    .icon-secondary { background: var(--gradient-secondary); }
    .icon-accent { background: var(--gradient-accent); }
    .icon-success { background: linear-gradient(135deg, var(--success) 0%, #059669 100%); }
    .icon-warning { background: linear-gradient(135deg, var(--warning) 0%, #D97706 100%); }
    .icon-info { background: linear-gradient(135deg, var(--info) 0%, #1D4ED8 100%); }

    .stat-card.gradient .stat-card-icon {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
    }

    /* Content Styles */
    .stat-card-content {
        flex: 1;
        position: relative;
        z-index: 1;
    }

    .stat-value {
        font-weight: 800;
        color: var(--text-primary);
        line-height: 1;
        margin-bottom: var(--space-1);
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stat-card.gradient .stat-value {
        color: white;
        background: none;
        -webkit-text-fill-color: white;
    }

    .stat-value.size-xs { font-size: 1.5rem; }
    .stat-value.size-sm { font-size: 2rem; }
    .stat-value.size-md { font-size: 2.5rem; }
    .stat-value.size-lg { font-size: 3rem; }
    .stat-value.size-xl { font-size: 3.5rem; }

    .stat-label {
        font-size: var(--font-size-base);
        color: var(--text-secondary);
        font-weight: 600;
        margin-bottom: var(--space-2);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .stat-card.gradient .stat-label {
        color: rgba(255, 255, 255, 0.8);
    }

    .stat-change {
        font-size: var(--font-size-sm);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: var(--space-1);
        margin-bottom: var(--space-2);
    }

    .stat-change.positive {
        color: var(--success);
    }

    .stat-change.negative {
        color: var(--danger);
    }

    .stat-change.neutral {
        color: var(--text-muted);
    }

    .stat-card.gradient .stat-change {
        color: rgba(255, 255, 255, 0.9);
    }

    .change-icon {
        font-size: 0.875rem;
    }

    /* Sub Metrics */
    .stat-sub-metrics {
        display: flex;
        flex-direction: column;
        gap: var(--space-1);
    }

    .sub-metric {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: var(--font-size-sm);
    }

    .sub-metric-label {
        color: var(--text-secondary);
        font-weight: 500;
    }

    .sub-metric-value {
        color: var(--text-primary);
        font-weight: 600;
    }

    .stat-card.gradient .sub-metric-label {
        color: rgba(255, 255, 255, 0.7);
    }

    .stat-card.gradient .sub-metric-value {
        color: white;
    }

    /* Action */
    .stat-card-action {
        position: relative;
        z-index: 1;
    }

    /* Variants */
    .stat-card.workouts::before {
        background: linear-gradient(135deg, transparent 0%, rgba(232, 69, 69, 0.05) 100%);
    }

    .stat-card.time::before {
        background: linear-gradient(135deg, transparent 0%, rgba(43, 46, 74, 0.05) 100%);
    }

    .stat-card.sets::before {
        background: linear-gradient(135deg, transparent 0%, rgba(144, 55, 73, 0.05) 100%);
    }

    .stat-card.weight::before {
        background: linear-gradient(135deg, transparent 0%, rgba(16, 185, 129, 0.05) 100%);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .stat-card {
            padding: var(--space-4);
            flex-direction: column;
            text-align: center;
        }

        .stat-card-icon {
            margin-bottom: var(--space-3);
        }

        .stat-value.size-md { font-size: 2rem; }
        .stat-value.size-lg { font-size: 2.5rem; }
        .stat-value.size-xl { font-size: 3rem; }
    }

    @@media (max-width: 576px) {
        .stat-card {
            padding: var(--space-3);
        }

        .stat-card-icon {
            width: 48px;
            height: 48px;
            font-size: 1.25rem;
        }

        .stat-value.size-md { font-size: 1.75rem; }
        .stat-value.size-lg { font-size: 2rem; }
        .stat-value.size-xl { font-size: 2.5rem; }
    }
</style>

@code {
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string? Icon { get; set; }
    [Parameter] public RenderFragment? IconTemplate { get; set; }
    [Parameter] public string? Change { get; set; }
    [Parameter] public RenderFragment? ChangeTemplate { get; set; }
    [Parameter] public ChangeType ChangeDirection { get; set; } = ChangeType.None;
    [Parameter] public StatCardVariant Variant { get; set; } = StatCardVariant.Default;
    [Parameter] public StatCardSize Size { get; set; } = StatCardSize.Medium;
    [Parameter] public IconVariant IconColor { get; set; } = IconVariant.Primary;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public List<SubMetric>? SubMetrics { get; set; }
    [Parameter] public RenderFragment? ActionTemplate { get; set; }

    private string GetVariantClass()
    {
        return Variant switch
        {
            StatCardVariant.Elevated => "elevated",
            StatCardVariant.Gradient => "gradient",
            StatCardVariant.Compact => "compact",
            StatCardVariant.Horizontal => "horizontal",
            StatCardVariant.Vertical => "vertical",
            _ => ""
        };
    }

    private string GetValueSizeClass()
    {
        return Size switch
        {
            StatCardSize.ExtraSmall => "size-xs",
            StatCardSize.Small => "size-sm",
            StatCardSize.Medium => "size-md",
            StatCardSize.Large => "size-lg",
            StatCardSize.ExtraLarge => "size-xl",
            _ => "size-md"
        };
    }

    private string GetIconVariantClass()
    {
        return IconColor switch
        {
            IconVariant.Primary => "icon-primary",
            IconVariant.Secondary => "icon-secondary",
            IconVariant.Accent => "icon-accent",
            IconVariant.Success => "icon-success",
            IconVariant.Warning => "icon-warning",
            IconVariant.Info => "icon-info",
            _ => "icon-primary"
        };
    }

    private string GetChangeClass()
    {
        return ChangeDirection switch
        {
            ChangeType.Positive => "positive",
            ChangeType.Negative => "negative",
            ChangeType.Neutral => "neutral",
            _ => ""
        };
    }

    private string GetChangeIcon()
    {
        return ChangeDirection switch
        {
            ChangeType.Positive => "arrow-top",
            ChangeType.Negative => "arrow-bottom",
            ChangeType.Neutral => "minus",
            _ => "minus"
        };
    }

    public enum StatCardVariant
    {
        Default,
        Elevated,
        Gradient,
        Compact,
        Horizontal,
        Vertical
    }

    public enum StatCardSize
    {
        ExtraSmall,
        Small,
        Medium,
        Large,
        ExtraLarge
    }

    public enum IconVariant
    {
        Primary,
        Secondary,
        Accent,
        Success,
        Warning,
        Info
    }

    public enum ChangeType
    {
        None,
        Positive,
        Negative,
        Neutral
    }

    public class SubMetric
    {
        public string Label { get; set; } = "";
        public string Value { get; set; } = "";
    }
}
