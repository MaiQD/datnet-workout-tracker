@page "/workouts"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IWorkoutService WorkoutService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Workouts - DatNet Workout Tracker</PageTitle>

<div class="workouts-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>My Workouts</h1>
        <SfButton CssClass="e-success" OnClick="StartNewWorkout">
            <span class="oi oi-plus"></span> New Workout
        </SfButton>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Filter Options -->
        <div class="row mb-4">
            <div class="col-md-3">
                <SfDropDownList TValue="WorkoutStatus?" TItem="WorkoutStatusOption" 
                               DataSource="@statusOptions" 
                               Value="@selectedStatus"
                               ValueChanged="@OnStatusFilterChanged"
                               Placeholder="Filter by Status">
                    <DropDownListFieldSettings Text="Text" Value="Value" />
                </SfDropDownList>
            </div>
            <div class="col-md-3">
                <SfDatePicker TValue="DateTime?" 
                             Value="@filterStartDate"
                             ValueChanged="@OnStartDateChanged"
                             Placeholder="From Date" />
            </div>
            <div class="col-md-3">
                <SfDatePicker TValue="DateTime?" 
                             Value="@filterEndDate"
                             ValueChanged="@OnEndDateChanged"
                             Placeholder="To Date" />
            </div>
            <div class="col-md-3">
                <SfButton CssClass="e-outline" OnClick="ClearFilters">
                    Clear Filters
                </SfButton>
            </div>
        </div>

        <!-- Workouts Grid -->
        <SfGrid DataSource="@filteredWorkouts" AllowPaging="true" PageSize="10" AllowSorting="true">
            <GridPageSettings PageSize="10" />
            <GridColumns>
                <GridColumn Field="Name" HeaderText="Workout Name" Width="200px">
                    <Template>
                        @{
                            var workout = context as Workout;
                            <div>
                                <strong>@workout!.Name</strong>
                                @if (!string.IsNullOrEmpty(workout.Description))
                                {
                                    <br><small class="text-muted">@workout.Description</small>
                                }
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="StartTime" HeaderText="Date" Width="120px" Format="MMM dd, yyyy" />
                <GridColumn Field="Duration" HeaderText="Duration" Width="100px">
                    <Template>
                        @{
                            var workout = context as Workout;
                            var duration = workout!.Duration?.ToString(@"hh\:mm") ?? "-";
                        }
                        @duration
                    </Template>
                </GridColumn>
                <GridColumn Field="Status" HeaderText="Status" Width="100px">
                    <Template>
                        @{
                            var workout = context as Workout;
                            var badgeClass = workout!.Status switch
                            {
                                WorkoutStatus.Completed => "bg-success",
                                WorkoutStatus.InProgress => "bg-warning",
                                WorkoutStatus.Planned => "bg-info",
                                WorkoutStatus.Cancelled => "bg-secondary",
                                _ => "bg-light"
                            };
                        }
                        <span class="badge @badgeClass">@workout.Status</span>
                    </Template>
                </GridColumn>
                <GridColumn Field="Exercises" HeaderText="Exercises" Width="120px">
                    <Template>
                        @{
                            var workout = context as Workout;
                        }
                        @workout!.Exercises.Count exercises
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Actions" Width="150px">
                    <Template>
                        @{
                            var workout = context as Workout;
                        }
                        <div class="action-buttons">
                            @if (workout!.Status == WorkoutStatus.InProgress)
                            {
                                <SfButton CssClass="e-success e-small" OnClick="() => ContinueWorkout(workout.Id)">
                                    Continue
                                </SfButton>
                            }
                            else if (workout.Status == WorkoutStatus.Planned)
                            {
                                <SfButton CssClass="e-primary e-small" OnClick="() => StartWorkout(workout.Id)">
                                    Start
                                </SfButton>
                            }
                            else
                            {
                                <SfButton CssClass="e-info e-small" OnClick="() => ViewWorkout(workout.Id)">
                                    View
                                </SfButton>
                            }
                        </div>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    }
</div>

<style>
    .workouts-page {
        padding: 1rem 0;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }
</style>

@code {
    private bool isLoading = true;
    private List<Workout> workouts = new();
    private List<Workout> filteredWorkouts = new();
    private string currentUserId = "";

    // Filter properties
    private WorkoutStatus? selectedStatus;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;

    private List<WorkoutStatusOption> statusOptions = new()
    {
        new WorkoutStatusOption { Text = "All Statuses", Value = null },
        new WorkoutStatusOption { Text = "Planned", Value = WorkoutStatus.Planned },
        new WorkoutStatusOption { Text = "In Progress", Value = WorkoutStatus.InProgress },
        new WorkoutStatusOption { Text = "Completed", Value = WorkoutStatus.Completed },
        new WorkoutStatusOption { Text = "Cancelled", Value = WorkoutStatus.Cancelled }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";

        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadWorkouts();
        }

        isLoading = false;
    }

    private async Task LoadWorkouts()
    {
        try
        {
            var allWorkouts = await WorkoutService.GetWorkoutsByUserAsync(currentUserId);
            workouts = allWorkouts.OrderByDescending(w => w.StartTime).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredWorkouts = workouts.Where(w =>
        {
            if (selectedStatus.HasValue && w.Status != selectedStatus.Value)
                return false;

            if (filterStartDate.HasValue && w.StartTime.Date < filterStartDate.Value.Date)
                return false;

            if (filterEndDate.HasValue && w.StartTime.Date > filterEndDate.Value.Date)
                return false;

            return true;
        }).ToList();
    }

    private async Task OnStatusFilterChanged(WorkoutStatus? status)
    {
        selectedStatus = status;
        ApplyFilters();
    }

    private async Task OnStartDateChanged(DateTime? date)
    {
        filterStartDate = date;
        ApplyFilters();
    }

    private async Task OnEndDateChanged(DateTime? date)
    {
        filterEndDate = date;
        ApplyFilters();
    }

    private void ClearFilters()
    {
        selectedStatus = null;
        filterStartDate = null;
        filterEndDate = null;
        ApplyFilters();
    }

    private void StartNewWorkout()
    {
        Navigation.NavigateTo("/workouts/new");
    }

    private async Task StartWorkout(string workoutId)
    {
        try
        {
            await WorkoutService.StartWorkoutAsync(workoutId);
            Navigation.NavigateTo($"/workouts/{workoutId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting workout: {ex.Message}");
        }
    }

    private void ContinueWorkout(string workoutId)
    {
        Navigation.NavigateTo($"/workouts/{workoutId}");
    }

    private void ViewWorkout(string workoutId)
    {
        Navigation.NavigateTo($"/workouts/{workoutId}");
    }

    public class WorkoutStatusOption
    {
        public string Text { get; set; } = "";
        public WorkoutStatus? Value { get; set; }
    }
}
