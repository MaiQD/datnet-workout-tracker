@page "/exercises"
@using Microsoft.AspNetCore.Authorization
@using DatNetWorkoutTracker.Exercises.Domain
@attribute [Authorize]
@inject IExerciseService ExerciseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Exercise Library - DatNet Workout Tracker</PageTitle>

<div class="exercises-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Exercise Library</h1>
        <SfButton CssClass="e-success" OnClick="ShowAddExerciseDialog">
            <span class="oi oi-plus"></span> Add Exercise
        </SfButton>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Filter and Search -->
        <div class="row mb-4">
            <div class="col-md-4">
                <SfTextBox @bind-Value="searchTerm" 
                          Placeholder="Search exercises...">
                </SfTextBox>
            </div>
            <div class="col-md-3">
                <SfDropDownList TValue="string" TItem="string" 
                               DataSource="@muscleGroups" 
                               @bind-Value="selectedMuscleGroup"
                               ValueChange="@((string value) => OnMuscleGroupChanged(value))"
                               Placeholder="Filter by Muscle Group">
                </SfDropDownList>
            </div>
            <div class="col-md-3">
                <SfDropDownList TValue="string" TItem="string" 
                               DataSource="@equipmentTypes" 
                               @bind-Value="selectedEquipment"
                               ValueChange="@((string value) => OnEquipmentChanged(value))"
                               Placeholder="Filter by Equipment">
                </SfDropDownList>
            </div>
            <div class="col-md-2">
                <SfButton CssClass="e-outline" OnClick="ClearFilters">
                    Clear Filters
                </SfButton>
            </div>
        </div>

        <!-- Exercise Grid -->
        <div class="row">
            @foreach (var exercise in filteredExercises)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="exercise-card">
                        @if (!string.IsNullOrEmpty(exercise.ThumbnailUrl))
                        {
                            <div class="exercise-image">
                                <img src="@exercise.ThumbnailUrl" alt="@exercise.Name" class="img-fluid" />
                            </div>
                        }
                        <div class="exercise-content">
                            <h5 class="exercise-title">@exercise.Name</h5>
                            <div class="exercise-meta">
                                <span class="badge bg-primary">@string.Join(", ", exercise.TargetMuscleGroups)</span>
                                <span class="badge bg-secondary">@string.Join(", ", exercise.Equipment)</span>
                                <span class="badge bg-info">@exercise.Category</span>
                            </div>
                            <p class="exercise-description">@exercise.Description</p>
                            
                            <div class="exercise-actions">
                                <SfButton CssClass="e-info e-small" OnClick="() => ViewExerciseDetails(exercise)">
                                    View Details
                                </SfButton>
                                @if (!string.IsNullOrEmpty(exercise.YoutubeUrl))
                                {
                                    <SfButton CssClass="e-success e-small" OnClick="() => OpenVideoTutorial(exercise.YoutubeUrl)">
                                        Watch Tutorial
                                    </SfButton>
                                }
                                <SfButton CssClass="e-warning e-small" OnClick="() => EditExercise(exercise)">
                                    Edit
                                </SfButton>
                                <SfButton CssClass="e-danger e-small" OnClick="() => DeleteExercise(exercise.Id)">
                                    Delete
                                </SfButton>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!filteredExercises.Any())
        {
            <div class="text-center text-muted mt-5">
                <p>No exercises found matching your criteria.</p>
                <SfButton CssClass="e-primary" OnClick="ShowAddExerciseDialog">
                    Add Your First Exercise
                </SfButton>
            </div>
        }
    }
</div>

<!-- Add/Edit Exercise Modal -->
@if (showExerciseDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Exercise" : "Add New Exercise")</h5>
                    <button type="button" class="btn-close" @onclick="CloseExerciseDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Exercise Name *</label>
                                <SfTextBox @bind-Value="currentExercise.Name" Placeholder="Enter exercise name" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <SfTextBox @bind-Value="currentExercise.Description" 
                                          Multiline="true" 
                                          Placeholder="Describe the exercise..." />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Instructions</label>
                                <SfTextBox @bind-Value="instructionsText" 
                                          Multiline="true" 
                                          Placeholder="Step-by-step instructions..." />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Muscle Groups *</label>
                                <SfMultiSelect TValue="List<MuscleGroup>" TItem="MuscleGroup" 
                                               DataSource="@availableMuscleGroups" 
                                               @bind-Value="currentExercise.TargetMuscleGroups"
                                               Placeholder="Select muscle groups">
                                    <MultiSelectFieldSettings Value="Value" />
                                </SfMultiSelect>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Equipment *</label>
                                <SfMultiSelect TValue="List<Equipment>" TItem="Equipment" 
                                               DataSource="@availableEquipment" 
                                               @bind-Value="currentExercise.Equipment"
                                               Placeholder="Select equipment">
                                    <MultiSelectFieldSettings Value="Value" />
                                </SfMultiSelect>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <SfDropDownList TValue="ExerciseCategory" TItem="ExerciseCategory" 
                                               DataSource="@availableCategories" 
                                               @bind-Value="currentExercise.Category"
                                               Placeholder="Select category">
                                    <DropDownListFieldSettings Value="Value" />
                                </SfDropDownList>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Difficulty Level</label>
                                <SfDropDownList TValue="DifficultyLevel" TItem="DifficultyLevel" 
                                               DataSource="@availableDifficultyLevels" 
                                               @bind-Value="currentExercise.Difficulty"
                                               Placeholder="Select difficulty">
                                    <DropDownListFieldSettings Value="Value" />
                                </SfDropDownList>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Video URL (YouTube)</label>
                                <SfTextBox @bind-Value="currentExercise.YoutubeUrl" 
                                          Placeholder="https://youtube.com/watch?v=..." />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Image URL</label>
                                <SfTextBox @bind-Value="currentExercise.ThumbnailUrl" 
                                          Placeholder="https://example.com/image.jpg" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <SfButton CssClass="e-success" OnClick="SaveExercise" Disabled="@isSaving">
                        @(isSaving ? "Saving..." : "Save Exercise")
                    </SfButton>
                    <SfButton CssClass="e-outline" OnClick="CloseExerciseDialog">
                        Cancel
                    </SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Exercise Details Modal -->
@if (showDetailsModal && selectedExercise != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedExercise.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body">                        <div class="row">
                        @if (!string.IsNullOrEmpty(selectedExercise.ThumbnailUrl))
                        {
                            <div class="col-md-6">
                                <img src="@selectedExercise.ThumbnailUrl" alt="@selectedExercise.Name" 
                                     class="img-fluid rounded mb-3" />
                            </div>
                        }
                        <div class="col-md-@(string.IsNullOrEmpty(selectedExercise.ThumbnailUrl) ? "12" : "6")">
                            <div class="exercise-details">
                                <div class="detail-row">
                                    <strong>Muscle Groups:</strong>
                                    @foreach (var muscleGroup in selectedExercise.TargetMuscleGroups)
                                    {
                                        <span class="badge bg-primary me-1">@muscleGroup</span>
                                    }
                                </div>
                                <div class="detail-row">
                                    <strong>Equipment:</strong>
                                    @foreach (var equipment in selectedExercise.Equipment)
                                    {
                                        <span class="badge bg-secondary me-1">@equipment</span>
                                    }
                                </div>
                                <div class="detail-row">
                                    <strong>Category:</strong>
                                    <span class="badge bg-info">@selectedExercise.Category</span>
                                </div>
                                <div class="detail-row">
                                    <strong>Difficulty:</strong>
                                    <span class="badge bg-warning">@selectedExercise.Difficulty</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedExercise.Description))
                    {
                        <div class="mt-3">
                            <h6>Description</h6>
                            <p>@selectedExercise.Description</p>
                        </div>
                    }
                    
                    @if (selectedExercise.Instructions?.Any() == true)
                    {
                        <div class="mt-3">
                            <h6>Instructions</h6>
                            <div class="instructions">
                                @((MarkupString)string.Join("<br>", selectedExercise.Instructions))
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (!string.IsNullOrEmpty(selectedExercise.YoutubeUrl))
                    {
                        <SfButton CssClass="e-success" OnClick="() => OpenVideoTutorial(selectedExercise.YoutubeUrl)">
                            Watch Tutorial
                        </SfButton>
                    }
                    <SfButton CssClass="e-outline" OnClick="CloseDetailsModal">
                        Close
                    </SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .exercises-page {
        padding: 1rem 0;
    }

    .exercise-card {
        border: 1px solid #dee2e6;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .exercise-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .exercise-image {
        height: 200px;
        overflow: hidden;
        background: #f8f9fa;
    }

    .exercise-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .exercise-content {
        padding: 1rem;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .exercise-title {
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .exercise-meta {
        margin-bottom: 0.75rem;
    }

    .exercise-meta .badge {
        margin-right: 0.25rem;
        margin-bottom: 0.25rem;
    }

    .exercise-description {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 1rem;
        flex: 1;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .exercise-actions {
        display: flex;
        gap: 0.25rem;
        flex-wrap: wrap;
    }

    .exercise-actions .e-btn {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .detail-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .instructions {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
    }

    .modal.show {
        background-color: rgba(0,0,0,0.5);
    }

    @@media (max-width: 768px) {
        .exercise-actions {
            flex-direction: column;
        }
        
        .exercise-actions .e-btn {
            width: 100%;
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool isSaving = false;
    private List<Exercise> exercises = new();
    private List<Exercise> filteredExercises = new();
    
    // Filter properties
    private string searchTerm = "";
    private string selectedMuscleGroup = "";
    private string selectedEquipment = "";
    
    // Modal properties
    private bool showExerciseDialog = false;
    private bool showDetailsModal = false;
    private bool isEditMode = false;
    private Exercise currentExercise = new();
    private Exercise? selectedExercise;
    private string instructionsText = "";

    // Helper property to handle instructions conversion
    private void SetInstructionsFromText()
    {
        currentExercise.Instructions = string.IsNullOrEmpty(instructionsText) 
            ? new List<string>() 
            : instructionsText.Split('\n').ToList();
    }

    private void SetTextFromInstructions()
    {
        instructionsText = currentExercise.Instructions?.Any() == true 
            ? string.Join("\n", currentExercise.Instructions) 
            : "";
    }

    // Dropdown options
    private List<string> muscleGroups = new()
    {
        "All", "Chest", "Back", "Shoulders", "Arms", "Legs", "Core", "Cardio", "Full Body"
    };

    private List<string> equipmentTypes = new()
    {
        "All", "Bodyweight", "Dumbbells", "Barbell", "Kettlebell", "Resistance Bands", 
        "Cable Machine", "Pull-up Bar", "Cardio Machine", "Other"
    };

    private List<string> categories = new()
    {
        "Strength", "Cardio", "Flexibility", "Balance", "Plyometric", "Rehabilitation"
    };

    private List<string> difficultyLevels = new()
    {
        "Beginner", "Intermediate", "Advanced"
    };

    // Enum collections for form binding
    private List<MuscleGroup> availableMuscleGroups = Enum.GetValues<MuscleGroup>().ToList();
    private List<DatNetWorkoutTracker.Exercises.Domain.Equipment> availableEquipment = Enum.GetValues<DatNetWorkoutTracker.Exercises.Domain.Equipment>().ToList();
    private List<ExerciseCategory> availableCategories = Enum.GetValues<ExerciseCategory>().ToList();
    private List<DifficultyLevel> availableDifficultyLevels = Enum.GetValues<DifficultyLevel>().ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadExercises();
        isLoading = false;
    }

    private async Task LoadExercises()
    {
        try
        {
            exercises = (await ExerciseService.GetAllExercisesAsync()).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading exercises: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredExercises = exercises.Where(e =>
        {
            if (!string.IsNullOrEmpty(searchTerm) && 
                !e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) &&
                !e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                return false;

            if (!string.IsNullOrEmpty(selectedMuscleGroup) && selectedMuscleGroup != "All" && 
                !e.TargetMuscleGroups.Any(mg => mg.ToString() == selectedMuscleGroup))
                return false;

            if (!string.IsNullOrEmpty(selectedEquipment) && selectedEquipment != "All" && 
                !e.Equipment.Any(eq => eq.ToString() == selectedEquipment))
                return false;

            return true;
        }).ToList();
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        ApplyFilters();
    }

    private void OnMuscleGroupChanged(string value)
    {
        selectedMuscleGroup = value;
        ApplyFilters();
    }

    private void OnEquipmentChanged(string value)
    {
        selectedEquipment = value;
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedMuscleGroup = "";
        selectedEquipment = "";
        ApplyFilters();
    }

    private void ShowAddExerciseDialog()
    {
        currentExercise = new Exercise
        {
            TargetMuscleGroups = new List<MuscleGroup> { MuscleGroup.Chest },
            Equipment = new List<Equipment> { DatNetWorkoutTracker.Exercises.Domain.Equipment.Bodyweight },
            Category = ExerciseCategory.Strength,
            Difficulty = DifficultyLevel.Beginner
        };
        instructionsText = "";
        isEditMode = false;
        showExerciseDialog = true;
    }

    private void EditExercise(Exercise exercise)
    {
        currentExercise = new Exercise
        {
            Id = exercise.Id,
            Name = exercise.Name,
            Description = exercise.Description,
            Instructions = exercise.Instructions,
            TargetMuscleGroups = new List<MuscleGroup>(exercise.TargetMuscleGroups),
            Equipment = new List<DatNetWorkoutTracker.Exercises.Domain.Equipment>(exercise.Equipment),
            Category = exercise.Category,
            Difficulty = exercise.Difficulty,
            YoutubeUrl = exercise.YoutubeUrl,
            ThumbnailUrl = exercise.ThumbnailUrl
        };
        SetTextFromInstructions();
        isEditMode = true;
        showExerciseDialog = true;
    }

    private void CloseExerciseDialog()
    {
        showExerciseDialog = false;
        currentExercise = new();
    }

    private async Task SaveExercise()
    {
        // Convert instructions text to list
        SetInstructionsFromText();
        
        if (string.IsNullOrWhiteSpace(currentExercise.Name) ||
            !currentExercise.TargetMuscleGroups.Any() ||
            !currentExercise.Equipment.Any())
        {
            await JS.InvokeVoidAsync("alert", "Please fill in all required fields");
            return;
        }

        isSaving = true;
        try
        {
            if (isEditMode)
            {
                await ExerciseService.UpdateExerciseAsync(currentExercise);
            }
            else
            {
                await ExerciseService.CreateExerciseAsync(currentExercise);
            }

            await LoadExercises();
            CloseExerciseDialog();
            await JS.InvokeVoidAsync("alert", "Exercise saved successfully!");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving exercise: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteExercise(string exerciseId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this exercise?");
        if (confirmed)
        {
            try
            {
                await ExerciseService.DeleteExerciseAsync(exerciseId);
                await LoadExercises();
                await JS.InvokeVoidAsync("alert", "Exercise deleted successfully!");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting exercise: {ex.Message}");
            }
        }
    }

    private void ViewExerciseDetails(Exercise exercise)
    {
        selectedExercise = exercise;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedExercise = null;
    }

    private async Task OpenVideoTutorial(string videoUrl)
    {
        await JS.InvokeVoidAsync("open", videoUrl, "_blank");
    }
}
