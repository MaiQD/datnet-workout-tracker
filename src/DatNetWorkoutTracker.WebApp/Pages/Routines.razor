@page "/routines"
@using Microsoft.AspNetCore.Authorization
@using DatNetWorkoutTracker.Routines.Domain
@using DatNetWorkoutTracker.Exercises.Domain
@using DatNetWorkoutTracker.Workouts.Domain
@using System.Linq
@attribute [Authorize]
@inject IRoutineService RoutineService
@inject IExerciseService ExerciseService
@inject IWorkoutService WorkoutService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Workout Routines - DatNet Workout Tracker</PageTitle>

<div class="routines-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Workout Routines</h1>
        <SfButton CssClass="e-success" OnClick="ShowCreateRoutineDialog">
            <span class="oi oi-plus"></span> Create Routine
        </SfButton>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Filter Options -->
        <div class="row mb-4">
            <div class="col-md-4">
                <SfTextBox @bind-Value="searchTerm" 
                          @oninput="@((ChangeEventArgs e) => OnSearchChanged(e.Value?.ToString() ?? string.Empty))"
                          Placeholder="Search routines...">
                </SfTextBox>
            </div>
            <div class="col-md-3">
                <SfDropDownList TValue="string" TItem="string" 
                               DataSource="@categories" 
                               @bind-Value="selectedCategory"
                               ValueChange="OnCategoryChanged"
                               Placeholder="Filter by Category">
                </SfDropDownList>
            </div>
            <div class="col-md-3">
                <SfDropDownList TValue="string" TItem="string" 
                               DataSource="@difficultyLevels" 
                               @bind-Value="selectedDifficulty"
                               ValueChange="OnDifficultyChanged"
                               Placeholder="Filter by Difficulty">
                </SfDropDownList>
            </div>
            <div class="col-md-2">
                <SfButton CssClass="e-outline" OnClick="ClearFilters">
                    Clear Filters
                </SfButton>
            </div>
        </div>

        <!-- Routines Grid -->
        <div class="row">
            @foreach (var routine in filteredRoutines)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="routine-card">
                        <div class="routine-header">
                            <h5 class="routine-title">@routine.Name</h5>
                            <div class="routine-badges">
                                <span class="badge bg-secondary">@routine.Difficulty</span>
                            </div>
                        </div>
                        
                        <div class="routine-content">
                            <p class="routine-description">@routine.Description</p>
                            
                            <div class="routine-stats">
                                <div class="stat-item">
                                    <span class="stat-label">Exercises:</span>
                                    <span class="stat-value">@routine.Exercises.Count</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Est. Duration:</span>
                                    <span class="stat-value">@routine.EstimatedDuration min</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="routine-actions">
                            <SfButton CssClass="e-success e-small" OnClick="() => StartWorkoutFromRoutine(routine)">
                                Start Workout
                            </SfButton>
                            <SfButton CssClass="e-info e-small" OnClick="() => ViewRoutineDetails(routine)">
                                View Details
                            </SfButton>
                            <SfButton CssClass="e-warning e-small" OnClick="() => EditRoutine(routine)">
                                Edit
                            </SfButton>
                            <SfButton CssClass="e-danger e-small" OnClick="() => DeleteRoutine(routine.Id)">
                                Delete
                            </SfButton>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!filteredRoutines.Any())
        {
            <div class="text-center text-muted mt-5">
                <p>No routines found matching your criteria.</p>
                <SfButton CssClass="e-primary" OnClick="ShowCreateRoutineDialog">
                    Create Your First Routine
                </SfButton>
            </div>
        }
    }
</div>

<!-- Create/Edit Routine Modal -->
@if (showRoutineDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Routine" : "Create New Routine")</h5>
                    <button type="button" class="btn-close" @onclick="CloseRoutineDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Routine Details -->
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Routine Name *</label>
                                <SfTextBox @bind-Value="currentRoutine.Name" Placeholder="Enter routine name" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <SfTextBox @bind-Value="currentRoutine.Description" 
                                          Multiline="true" 
                                          Placeholder="Describe this routine..." />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Tags</label>
                                <SfTextBox @bind-Value="tagsText" 
                                          Placeholder="Enter tags separated by commas" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Difficulty Level *</label>
                                <SfDropDownList TValue="RoutineDifficulty" TItem="RoutineDifficulty" 
                                               DataSource="@(Enum.GetValues<RoutineDifficulty>())" 
                                               @bind-Value="currentRoutine.Difficulty"
                                               Placeholder="Select difficulty">
                                    <DropDownListFieldSettings Value="@nameof(RoutineDifficulty)" />
                                </SfDropDownList>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Estimated Duration (minutes)</label>
                                <SfNumericTextBox @bind-Value="estimatedDurationMinutes" Min="15" Max="180" />
                            </div>
                        </div>

                        <!-- Exercise Selection -->
                        <div class="col-md-8">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6>Exercises in Routine</h6>
                                <SfButton CssClass="e-outline e-small" OnClick="ShowAddExerciseToRoutineDialog">
                                    Add Exercise
                                </SfButton>
                            </div>

                            @if (currentRoutine.Exercises.Any())
                            {
                                <div class="routine-exercises">
                                    @foreach (var exercise in currentRoutine.Exercises.Select((e, i) => new { Exercise = e, Index = i }))
                                    {
                                        <div class="routine-exercise-item">
                                            <div class="exercise-info">
                                                <h6>@exercise.Exercise.ExerciseName</h6>
                                                <div class="exercise-params">
                                                    <span>Sets: @exercise.Exercise.PlannedSets.Count</span>
                                                    <span>Reps: @(exercise.Exercise.PlannedSets.FirstOrDefault()?.TargetReps ?? 0)</span>
                                                    <span>Rest: @exercise.Exercise.RestTime min</span>
                                                </div>
                                            </div>
                                            <div class="exercise-controls">
                                                <div class="param-controls">
                                                    <label>Sets:</label>
                                                    <span>@exercise.Exercise.PlannedSets.Count</span>
                                                </div>
                                                <div class="param-controls">
                                                    <label>Reps:</label>
                                                    <span>@(exercise.Exercise.PlannedSets.FirstOrDefault()?.TargetReps ?? 0)</span>
                                                </div>
                                                <div class="param-controls">
                                                    <label>Rest:</label>
                                                    <span>@(exercise.Exercise.RestTime?.TotalMinutes ?? 0) min</span>
                                                </div>
                                                <SfButton CssClass="e-danger e-small" 
                                                         OnClick="() => RemoveExerciseFromRoutine(exercise.Index)">
                                                    Remove
                                                </SfButton>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted">
                                    <p>No exercises added yet</p>
                                    <SfButton CssClass="e-primary" OnClick="ShowAddExerciseToRoutineDialog">
                                        Add Your First Exercise
                                    </SfButton>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <SfButton CssClass="e-success" OnClick="SaveRoutine" Disabled="@isSaving">
                        @(isSaving ? "Saving..." : "Save Routine")
                    </SfButton>
                    <SfButton CssClass="e-outline" OnClick="CloseRoutineDialog">
                        Cancel
                    </SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Add Exercise to Routine Modal -->
@if (showAddExerciseDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Exercise to Routine</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddExerciseDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Select Exercise</label>
                        <SfAutoComplete TValue="string" TItem="Exercise" 
                                       DataSource="@availableExercises"
                                       @bind-Value="selectedExerciseName"
                                       Placeholder="Search and select exercise">
                            <AutoCompleteFieldSettings Value="Name" />
                        </SfAutoComplete>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Sets</label>
                            <SfNumericTextBox @bind-Value="exerciseDefaultSets" Min="1" Max="10" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Reps</label>
                            <SfNumericTextBox @bind-Value="exerciseDefaultReps" Min="1" Max="50" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Rest (min)</label>
                            <SfNumericTextBox @bind-Value="exerciseDefaultRest" Min="0" Max="10" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <SfButton CssClass="e-success" OnClick="AddExerciseToRoutine">
                        Add Exercise
                    </SfButton>
                    <SfButton CssClass="e-outline" OnClick="CloseAddExerciseDialog">
                        Cancel
                    </SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Routine Details Modal -->
@if (showDetailsModal && selectedRoutine != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedRoutine.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="routine-info">
                                <div class="info-row">
                                    <strong>Tags:</strong>
                                    <span class="badge bg-primary">@string.Join(", ", selectedRoutine.Tags)</span>
                                </div>
                                <div class="info-row">
                                    <strong>Difficulty:</strong>
                                    <span class="badge bg-secondary">@selectedRoutine.Difficulty</span>
                                </div>
                                <div class="info-row">
                                    <strong>Duration:</strong>
                                    <span>@(selectedRoutine.EstimatedDuration?.TotalMinutes ?? 0) minutes</span>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedRoutine.Description))
                                {
                                    <div class="mt-3">
                                        <strong>Description:</strong>
                                        <p>@selectedRoutine.Description</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Exercises (@selectedRoutine.Exercises.Count)</h6>
                            <div class="exercise-list">
                                @foreach (var exercise in selectedRoutine.Exercises.Select((e, i) => new { Exercise = e, Index = i + 1 }))
                                {
                                    <div class="exercise-summary">
                                        <span class="exercise-number">@exercise.Index.</span>
                                        <div class="exercise-details">
                                            <div class="exercise-name">@exercise.Exercise.ExerciseName</div>
                                            <div class="exercise-params">
                                                @exercise.Exercise.PlannedSets.Count sets × @(exercise.Exercise.PlannedSets.FirstOrDefault()?.TargetReps ?? 0) reps
                                                (@(exercise.Exercise.RestTime?.TotalMinutes ?? 0) min rest)
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <SfButton CssClass="e-success" OnClick="() => StartWorkoutFromRoutine(selectedRoutine)">
                        Start Workout
                    </SfButton>
                    <SfButton CssClass="e-outline" OnClick="CloseDetailsModal">
                        Close
                    </SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .routines-page {
        padding: 1rem 0;
    }

    .routine-card {
        border: 1px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .routine-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .routine-header {
        margin-bottom: 1rem;
    }

    .routine-title {
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .routine-badges .badge {
        margin-right: 0.5rem;
    }

    .routine-content {
        flex: 1;
        margin-bottom: 1rem;
    }

    .routine-description {
        color: #6c757d;
        margin-bottom: 1rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .routine-stats {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .stat-item:last-child {
        margin-bottom: 0;
    }

    .stat-label {
        font-weight: 500;
    }

    .stat-value {
        font-weight: 600;
        color: #007bff;
    }

    .routine-actions {
        display: flex;
        gap: 0.25rem;
        flex-wrap: wrap;
    }

    .routine-actions .e-btn {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }

    .routine-exercises {
        max-height: 400px;
        overflow-y: auto;
    }

    .routine-exercise-item {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .exercise-info h6 {
        margin-bottom: 0.5rem;
    }

    .exercise-params span {
        margin-right: 1rem;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .exercise-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .param-controls {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .param-controls label {
        font-size: 0.8rem;
        margin-bottom: 0.25rem;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .info-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .exercise-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .exercise-summary {
        display: flex;
        align-items: flex-start;
        margin-bottom: 1rem;
        padding: 0.75rem;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .exercise-number {
        font-weight: bold;
        margin-right: 0.75rem;
        color: #007bff;
    }

    .exercise-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .exercise-params {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .modal.show {
        background-color: rgba(0,0,0,0.5);
    }

    @@media (max-width: 768px) {
        .routine-actions {
            flex-direction: column;
        }
        
        .routine-actions .e-btn {
            width: 100%;
        }

        .exercise-controls {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool isSaving = false;
    private List<Routine> routines = new();
    private List<Routine> filteredRoutines = new();
    private List<Exercise> availableExercises = new();
    private string currentUserId = "";
    
    // Filter properties
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedDifficulty = "";
    
    // Modal properties
    private bool showRoutineDialog = false;
    private bool showAddExerciseDialog = false;
    private bool showDetailsModal = false;
    private bool isEditMode = false;
    private Routine currentRoutine = new();
    private Routine? selectedRoutine;

    // Add exercise properties
    private string selectedExerciseName = "";
    private int exerciseDefaultSets = 3;
    private int exerciseDefaultReps = 10;
    private int exerciseDefaultRest = 2;
    
    // Helper properties for form binding
    private string tagsText = "";
    private int estimatedDurationMinutes = 60;

    private List<string> categories = new()
    {
        "All", "Strength", "Cardio", "Flexibility", "HIIT", "Bodybuilding", "Powerlifting", "CrossFit", "Yoga", "Pilates"
    };

    private List<string> difficultyLevels = new()
    {
        "All", "Beginner", "Intermediate", "Advanced"
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";

        if (!string.IsNullOrEmpty(currentUserId))
        {
            await Task.WhenAll(LoadRoutines(), LoadAvailableExercises());
        }

        isLoading = false;
    }

    private async Task LoadRoutines()
    {
        try
        {
            routines = (await RoutineService.GetRoutinesByUserAsync(currentUserId)).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading routines: {ex.Message}");
        }
    }

    private async Task LoadAvailableExercises()
    {
        try
        {
            availableExercises = (await ExerciseService.GetAllExercisesAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading exercises: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredRoutines = routines.Where(r =>
        {
            if (!string.IsNullOrEmpty(searchTerm) && 
                !r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) &&
                !(r.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                return false;

            if (!string.IsNullOrEmpty(selectedDifficulty) && selectedDifficulty != "All" && 
                r.Difficulty.ToString() != selectedDifficulty)
                return false;

            return true;
        }).ToList();
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        ApplyFilters();
    }

    private void OnCategoryChanged(string value)
    {
        selectedCategory = value;
        ApplyFilters();
    }

    private void OnDifficultyChanged(string value)
    {
        selectedDifficulty = value;
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        selectedDifficulty = "";
        ApplyFilters();
    }

    private void ShowCreateRoutineDialog()
    {
        currentRoutine = new Routine
        {
            UserId = currentUserId,
            Name = "New Routine",
            Difficulty = RoutineDifficulty.Beginner,
            EstimatedDuration = TimeSpan.FromMinutes(60),
            Exercises = new List<RoutineExercise>()
        };
        isEditMode = false;
        showRoutineDialog = true;
    }

    private void EditRoutine(Routine routine)
    {
        currentRoutine = new Routine
        {
            Id = routine.Id,
            UserId = routine.UserId,
            Name = routine.Name,
            Description = routine.Description,
            Difficulty = routine.Difficulty,
            EstimatedDuration = routine.EstimatedDuration,
            Tags = new List<string>(routine.Tags),
            Exercises = routine.Exercises.Select(e => new RoutineExercise
            {
                ExerciseId = e.ExerciseId,
                ExerciseName = e.ExerciseName,
                PlannedSets = e.PlannedSets.Select(ps => new PlannedSet
                {
                    SetNumber = ps.SetNumber,
                    TargetReps = ps.TargetReps,
                    TargetWeight = ps.TargetWeight,
                    TargetDuration = ps.TargetDuration,
                    Notes = ps.Notes
                }).ToList(),
                RestTime = e.RestTime,
                Order = e.Order,
                Notes = e.Notes
            }).ToList()
        };
        isEditMode = true;
        showRoutineDialog = true;
    }

    private void CloseRoutineDialog()
    {
        showRoutineDialog = false;
        currentRoutine = new();
    }

    private async Task SaveRoutine()
    {
        if (string.IsNullOrWhiteSpace(currentRoutine.Name))
        {
            await JS.InvokeVoidAsync("alert", "Please enter a routine name");
            return;
        }

        if (!currentRoutine.Exercises.Any())
        {
            await JS.InvokeVoidAsync("alert", "Please add at least one exercise to the routine");
            return;
        }

        isSaving = true;
        try
        {
            // Set exercise order
            for (int i = 0; i < currentRoutine.Exercises.Count; i++)
            {
                currentRoutine.Exercises[i].Order = i + 1;
            }

            if (isEditMode)
            {
                await RoutineService.UpdateRoutineAsync(currentRoutine);
            }
            else
            {
                await RoutineService.CreateRoutineAsync(currentRoutine);
            }

            await LoadRoutines();
            CloseRoutineDialog();
            await JS.InvokeVoidAsync("alert", "Routine saved successfully!");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving routine: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteRoutine(string routineId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this routine?");
        if (confirmed)
        {
            try
            {
                await RoutineService.DeleteRoutineAsync(routineId);
                await LoadRoutines();
                await JS.InvokeVoidAsync("alert", "Routine deleted successfully!");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting routine: {ex.Message}");
            }
        }
    }

    private void ViewRoutineDetails(Routine routine)
    {
        selectedRoutine = routine;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedRoutine = null;
    }

    private void ShowAddExerciseToRoutineDialog()
    {
        selectedExerciseName = "";
        exerciseDefaultSets = 3;
        exerciseDefaultReps = 10;
        exerciseDefaultRest = 2;
        showAddExerciseDialog = true;
    }

    private void CloseAddExerciseDialog()
    {
        showAddExerciseDialog = false;
    }

    private void AddExerciseToRoutine()
    {
        if (string.IsNullOrWhiteSpace(selectedExerciseName))
        {
            return;
        }

        var exercise = availableExercises.FirstOrDefault(e => e.Name == selectedExerciseName);
        if (exercise == null) return;

        currentRoutine.Exercises.Add(new RoutineExercise
        {
            ExerciseId = exercise.Id,
            ExerciseName = exercise.Name,
            PlannedSets = Enumerable.Range(1, exerciseDefaultSets)
                .Select(i => new PlannedSet
                {
                    SetNumber = i,
                    TargetReps = exerciseDefaultReps
                }).ToList(),
            RestTime = TimeSpan.FromMinutes(exerciseDefaultRest),
            Order = currentRoutine.Exercises.Count + 1
        });

        CloseAddExerciseDialog();
    }

    private void RemoveExerciseFromRoutine(int index)
    {
        currentRoutine.Exercises.RemoveAt(index);
        
        // Re-order remaining exercises
        for (int i = 0; i < currentRoutine.Exercises.Count; i++)
        {
            currentRoutine.Exercises[i].Order = i + 1;
        }
    }

    private async Task StartWorkoutFromRoutine(Routine routine)
    {
        try
        {
            var workout = new Workout
            {
                UserId = currentUserId,
                Name = $"{routine.Name} - {DateTime.Now:MMM dd}",
                Description = $"Workout from routine: {routine.Name}",
                StartTime = DateTime.Now,
                Status = WorkoutStatus.Planned,
                RoutineId = routine.Id,
                Exercises = routine.Exercises.Select(re => new WorkoutExercise
                {
                    ExerciseId = re.ExerciseId,
                    ExerciseName = re.ExerciseName,
                    Order = re.Order,
                    RestTime = re.RestTime,
                    Sets = re.PlannedSets.Select(ps => new WorkoutSet
                    {
                        SetNumber = ps.SetNumber,
                        Reps = ps.TargetReps,
                        Weight = ps.TargetWeight ?? 0,
                        IsCompleted = false
                    }).ToList()
                }).ToList()
            };

            var workoutId = await WorkoutService.CreateWorkoutAsync(workout);
            Navigation.NavigateTo($"/workouts/{workoutId}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error creating workout from routine: {ex.Message}");
        }
    }
}
