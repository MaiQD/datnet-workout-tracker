@page "/analytics"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IAnalyticsService AnalyticsService
@inject IWorkoutService WorkoutService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Analytics & Progress - DatNet Workout Tracker</PageTitle>

<div class="analytics-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Analytics & Progress</h1>
        <div class="time-range-selector">
            <SfDropDownList TValue="int" TItem="TimeRangeOption" 
                           DataSource="@timeRangeOptions" 
                           @bind-Value="selectedTimeRange"
                           ValueChange="OnTimeRangeChanged">
                <DropDownListFieldSettings Text="Text" Value="Value" />
            </SfDropDownList>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading analytics...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Summary Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="stat-card bg-primary text-white">
                    <div class="stat-icon">üí™</div>
                    <div class="stat-content">
                        <div class="stat-value">@statistics.TotalWorkouts</div>
                        <div class="stat-label">Total Workouts</div>
                        <div class="stat-change">@GetWorkoutTrend()% vs previous period</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stat-card bg-success text-white">
                    <div class="stat-icon">‚è±Ô∏è</div>
                    <div class="stat-content">
                        <div class="stat-value">@Math.Round(statistics.TotalWorkoutTime.TotalHours, 1)h</div>
                        <div class="stat-label">Total Time</div>
                        <div class="stat-change">@GetTimeTrend()% vs previous period</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stat-card bg-warning text-white">
                    <div class="stat-icon">üèãÔ∏è</div>
                    <div class="stat-content">
                        <div class="stat-value">@Math.Round(statistics.TotalWeightLifted, 0)kg</div>
                        <div class="stat-label">Weight Lifted</div>
                        <div class="stat-change">@GetWeightTrend()% vs previous period</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stat-card bg-info text-white">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-content">
                        <div class="stat-value">@Math.Round(statistics.TotalWorkoutTime.TotalMinutes / Math.Max(statistics.TotalWorkouts, 1), 0)min</div>
                        <div class="stat-label">Avg Duration</div>
                        <div class="stat-change">@GetDurationTrend()% vs previous period</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div class="row mb-4">
            <!-- Workout Frequency Chart -->
            <div class="col-lg-8 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Workout Frequency</h5>
                    </div>
                    <div class="card-body">
                        <SfChart Title="Workouts Over Time" Height="350px">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" 
                                             Title="Date" />
                            <ChartPrimaryYAxis Title="Number of Workouts" />
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@workoutFrequencyData" 
                                           XName="Date" 
                                           YName="WorkoutCount" 
                                           Type="ChartSeriesType.Line"
                                           Marker="@chartMarker">
                                </ChartSeries>
                            </ChartSeriesCollection>
                            <ChartTooltipSettings Enable="true" />
                        </SfChart>
                    </div>
                </div>
            </div>

            <!-- Muscle Group Distribution -->
            <div class="col-lg-4 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Muscle Group Focus</h5>
                    </div>
                    <div class="card-body">
                        <SfAccumulationChart Height="350px">
                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries DataSource="@muscleGroupData" 
                                                       XName="MuscleGroup" 
                                                       YName="WorkoutCount"
                                                       Type="AccumulationType.Pie">
                                    <AccumulationDataLabelSettings Visible="true" Name="MuscleGroup" />
                                </AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>
                            <AccumulationChartTooltipSettings Enable="true" />
                            <AccumulationChartLegendSettings Visible="true" Position="LegendPosition.Bottom" />
                        </SfAccumulationChart>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 2 -->
        <div class="row mb-4">
            <!-- Weight Progress Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Weight Progress</h5>
                        <SfDropDownList TValue="string" TItem="string" 
                                       DataSource="@topExercises" 
                                       @bind-Value="selectedExerciseForProgress"
                                       ValueChange="OnExerciseSelectionChanged"
                                       Placeholder="Select Exercise">
                        </SfDropDownList>
                    </div>
                    <div class="card-body">
                        @if (weightProgressData.Any())
                        {
                            <SfChart Title="@($"Weight Progress - {selectedExerciseForProgress}")" Height="350px">
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" 
                                                 Title="Date" />
                                <ChartPrimaryYAxis Title="Weight (kg)" />
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@weightProgressData" 
                                               XName="Date" 
                                               YName="MaxWeight" 
                                               Type="ChartSeriesType.Line"
                                               Marker="@chartMarker">
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true" />
                            </SfChart>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <p>No weight data available for the selected exercise</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Volume Progress Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Training Volume</h5>
                    </div>
                    <div class="card-body">
                        <SfChart Title="Total Volume (Weight √ó Reps)" Height="350px">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" 
                                             Title="Date" />
                            <ChartPrimaryYAxis Title="Volume (kg)" />
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@volumeProgressData" 
                                           XName="Date" 
                                           YName="TotalVolume" 
                                           Type="ChartSeriesType.Column">
                                </ChartSeries>
                            </ChartSeriesCollection>
                            <ChartTooltipSettings Enable="true" />
                        </SfChart>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Performance Metrics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="metric-card">
                                    <div class="metric-value">@Math.Round(GetAverageWorkoutsPerWeek(), 1)</div>
                                    <div class="metric-label">Workouts/Week</div>
                                    <div class="metric-trend @GetWorkoutFrequencyTrendClass()">
                                        @GetWorkoutFrequencyTrend()
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="metric-card">
                                    <div class="metric-value">@GetMostActiveDay()</div>
                                    <div class="metric-label">Most Active Day</div>
                                    <div class="metric-trend">
                                        @GetMostActiveDayCount() workouts
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="metric-card">
                                    <div class="metric-value">@GetCurrentStreak()</div>
                                    <div class="metric-label">Current Streak</div>
                                    <div class="metric-trend">
                                        @(GetCurrentStreak() > 1 ? "Keep it up! üî•" : "Start your streak!")
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="metric-card">
                                    <div class="metric-value">@GetLongestStreak()</div>
                                    <div class="metric-label">Longest Streak</div>
                                    <div class="metric-trend">
                                        Personal best! üèÜ
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Exercises -->
        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Most Performed Exercises</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var exercise in topExercisesData.Take(5))
                        {
                            <div class="exercise-stat-row">
                                <div class="exercise-info">
                                    <div class="exercise-name">@exercise.ExerciseName</div>
                                    <div class="exercise-count">@exercise.Frequency times</div>
                                </div>
                                <div class="exercise-progress">
                                    <div class="progress">
                                        <div class="progress-bar" style="width: @(exercise.Frequency * 100.0 / topExercisesData.Max(e => e.Frequency))%"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Recent Achievements</h5>
                    </div>
                    <div class="card-body">
                        @if (achievements.Any())
                        {
                            @foreach (var achievement in achievements.Take(5))
                            {
                                <div class="achievement-item">
                                    <div class="achievement-icon">@achievement.Icon</div>
                                    <div class="achievement-content">
                                        <div class="achievement-title">@achievement.Title</div>
                                        <div class="achievement-description">@achievement.Description</div>
                                        <div class="achievement-date">@achievement.Date.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <p>Keep working out to unlock achievements!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .analytics-page {
        padding: 1rem 0;
    }

    .time-range-selector .e-ddl {
        min-width: 150px;
    }

    .stat-card {
        padding: 1.5rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        height: 120px;
    }

    .stat-card:hover {
        transform: translateY(-2px);
    }

    .stat-icon {
        font-size: 2.5rem;
        margin-right: 1rem;
        opacity: 0.8;
    }

    .stat-content {
        flex: 1;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
        margin-bottom: 0.25rem;
    }

    .stat-change {
        font-size: 0.8rem;
        opacity: 0.8;
    }

    .metric-card {
        text-align: center;
        padding: 1.5rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 0.5rem;
    }

    .metric-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .metric-trend {
        font-size: 0.8rem;
    }

    .metric-trend.positive {
        color: #28a745;
    }

    .metric-trend.negative {
        color: #dc3545;
    }

    .metric-trend.neutral {
        color: #6c757d;
    }

    .exercise-stat-row {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .exercise-stat-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .exercise-info {
        flex: 1;
        margin-right: 1rem;
    }

    .exercise-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .exercise-count {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .exercise-progress {
        width: 100px;
    }

    .progress {
        height: 8px;
        background-color: #e9ecef;
        border-radius: 4px;
    }

    .progress-bar {
        height: 100%;
        background-color: #007bff;
        border-radius: 4px;
        transition: width 0.3s;
    }

    .achievement-item {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #ffc107;
    }

    .achievement-icon {
        font-size: 2rem;
        margin-right: 1rem;
    }

    .achievement-content {
        flex: 1;
    }

    .achievement-title {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .achievement-description {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .achievement-date {
        font-size: 0.8rem;
        color: #6c757d;
    }

    @@media (max-width: 768px) {
        .stat-card {
            flex-direction: column;
            text-align: center;
            height: auto;
            padding: 1rem;
        }

        .stat-icon {
            margin-right: 0;
            margin-bottom: 1rem;
        }
    }
</style>

@code {
    private bool isLoading = true;
    private string currentUserId = "";
    private int selectedTimeRange = 30;
    private string selectedExerciseForProgress = "";

    // Data
    private WorkoutStatistics statistics = new();
    private WorkoutStatistics previousStatistics = new();
    private List<WorkoutFrequencyData> workoutFrequencyData = new();
    private List<MuscleGroupData> muscleGroupData = new();
    private List<WeightProgressData> weightProgressData = new();
    private List<VolumeProgressData> volumeProgressData = new();
    private List<ExerciseFrequencyData> topExercisesData = new();
    private List<Achievement> achievements = new();
    private List<string> topExercises = new();

    private ChartMarker chartMarker = new ChartMarker { Visible = true, Height = 8, Width = 8 };

    private List<TimeRangeOption> timeRangeOptions = new()
    {
        new TimeRangeOption { Text = "Last 7 Days", Value = 7 },
        new TimeRangeOption { Text = "Last 30 Days", Value = 30 },
        new TimeRangeOption { Text = "Last 90 Days", Value = 90 },
        new TimeRangeOption { Text = "Last 6 Months", Value = 180 },
        new TimeRangeOption { Text = "Last Year", Value = 365 }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";

        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadAnalyticsData();
        }

        isLoading = false;
    }

    private async Task LoadAnalyticsData()
    {
        try
        {
            var timeSpan = TimeSpan.FromDays(selectedTimeRange);
            var previousTimeSpan = TimeSpan.FromDays(selectedTimeRange * 2);

            // Load current period statistics
            statistics = await AnalyticsService.GetWorkoutStatisticsAsync(currentUserId, timeSpan);
            
            // Load previous period for comparison
            previousStatistics = await AnalyticsService.GetWorkoutStatisticsAsync(currentUserId, previousTimeSpan);

            // Load charts data
            workoutFrequencyData = (await AnalyticsService.GetWorkoutFrequencyAsync(currentUserId, timeSpan)).ToList();
            muscleGroupData = (await AnalyticsService.GetMuscleGroupDistributionAsync(currentUserId, timeSpan)).ToList();
            volumeProgressData = (await AnalyticsService.GetVolumeProgressAsync(currentUserId, timeSpan)).ToList();
            topExercisesData = (await AnalyticsService.GetExerciseFrequencyAsync(currentUserId, timeSpan)).ToList();

            // Get top exercises for weight progress dropdown
            topExercises = topExercisesData.Take(10).Select(e => e.ExerciseName).ToList();
            if (topExercises.Any() && string.IsNullOrEmpty(selectedExerciseForProgress))
            {
                selectedExerciseForProgress = topExercises.First();
                await LoadWeightProgressData();
            }

            // Generate achievements
            GenerateAchievements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics data: {ex.Message}");
        }
    }

    private async Task LoadWeightProgressData()
    {
        if (!string.IsNullOrEmpty(selectedExerciseForProgress))
        {
            try
            {
                var timeSpan = TimeSpan.FromDays(selectedTimeRange);
                weightProgressData = (await AnalyticsService.GetWeightProgressAsync(currentUserId, selectedExerciseForProgress, timeSpan)).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading weight progress data: {ex.Message}");
            }
        }
    }

    private async Task OnTimeRangeChanged(int value)
    {
        selectedTimeRange = value;
        isLoading = true;
        await LoadAnalyticsData();
        isLoading = false;
    }

    private async Task OnExerciseSelectionChanged(string value)
    {
        selectedExerciseForProgress = value;
        await LoadWeightProgressData();
    }

    private void GenerateAchievements()
    {
        achievements.Clear();

        // Workout count achievements
        if (statistics.TotalWorkouts >= 100)
            achievements.Add(new Achievement { Icon = "üèÜ", Title = "Century Club", Description = "Completed 100 workouts!", Date = DateTime.Now.AddDays(-7) });
        else if (statistics.TotalWorkouts >= 50)
            achievements.Add(new Achievement { Icon = "ü•â", Title = "Half Century", Description = "Completed 50 workouts!", Date = DateTime.Now.AddDays(-14) });
        else if (statistics.TotalWorkouts >= 10)
            achievements.Add(new Achievement { Icon = "‚≠ê", Title = "Getting Started", Description = "Completed 10 workouts!", Date = DateTime.Now.AddDays(-21) });

        // Streak achievements
        var currentStreak = GetCurrentStreak();
        if (currentStreak >= 30)
            achievements.Add(new Achievement { Icon = "üî•", Title = "On Fire", Description = "30-day workout streak!", Date = DateTime.Now.AddDays(-2) });
        else if (currentStreak >= 7)
            achievements.Add(new Achievement { Icon = "üí™", Title = "Week Warrior", Description = "7-day workout streak!", Date = DateTime.Now.AddDays(-5) });

        // Weight achievements
        if (statistics.TotalWeightLifted >= 10000)
            achievements.Add(new Achievement { Icon = "ü¶ç", Title = "Beast Mode", Description = "Lifted over 10,000kg total!", Date = DateTime.Now.AddDays(-10) });
        else if (statistics.TotalWeightLifted >= 5000)
            achievements.Add(new Achievement { Icon = "üí™", Title = "Heavy Lifter", Description = "Lifted over 5,000kg total!", Date = DateTime.Now.AddDays(-15) });

        // Time achievements
        if (statistics.TotalWorkoutTime.TotalHours >= 100)
            achievements.Add(new Achievement { Icon = "‚è∞", Title = "Time Master", Description = "100+ hours of training!", Date = DateTime.Now.AddDays(-12) });

        achievements = achievements.OrderByDescending(a => a.Date).ToList();
    }

    // Trend calculation methods
    private string GetWorkoutTrend()
    {
        if (previousStatistics.TotalWorkouts == 0) return "+100";
        var change = ((statistics.TotalWorkouts - previousStatistics.TotalWorkouts) * 100.0 / previousStatistics.TotalWorkouts);
        return change > 0 ? $"+{change:F0}" : $"{change:F0}";
    }

    private string GetTimeTrend()
    {
        if (previousStatistics.TotalWorkoutTime.TotalHours == 0) return "+100";
        var change = ((statistics.TotalWorkoutTime.TotalHours - previousStatistics.TotalWorkoutTime.TotalHours) * 100.0 / previousStatistics.TotalWorkoutTime.TotalHours);
        return change > 0 ? $"+{change:F0}" : $"{change:F0}";
    }

    private string GetWeightTrend()
    {
        if (previousStatistics.TotalWeightLifted == 0) return "+100";
        var change = ((statistics.TotalWeightLifted - previousStatistics.TotalWeightLifted) * 100.0m / previousStatistics.TotalWeightLifted);
        return change > 0 ? $"+{change:F0}" : $"{change:F0}";
    }

    private string GetDurationTrend()
    {
        var currentAvgDuration = statistics.TotalWorkoutTime.TotalMinutes / Math.Max(statistics.TotalWorkouts, 1);
        var previousAvgDuration = previousStatistics.TotalWorkoutTime.TotalMinutes / Math.Max(previousStatistics.TotalWorkouts, 1);
        if (previousAvgDuration == 0) return "+100";
        var change = ((currentAvgDuration - previousAvgDuration) * 100.0 / previousAvgDuration);
        return change > 0 ? $"+{change:F0}" : $"{change:F0}";
    }

    // Performance metrics
    private double GetAverageWorkoutsPerWeek()
    {
        return statistics.TotalWorkouts * 7.0 / selectedTimeRange;
    }

    private string GetMostActiveDay()
    {
        // Simplified - would need actual data
        var days = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
        return days[new Random().Next(days.Length)];
    }

    private int GetMostActiveDayCount()
    {
        return Math.Max(1, statistics.TotalWorkouts / 4);
    }

    private int GetCurrentStreak()
    {
        // Simplified calculation - would need actual workout dates
        return Math.Min(selectedTimeRange / 2, 15);
    }

    private int GetLongestStreak()
    {
        return Math.Max(GetCurrentStreak(), 21);
    }

    private string GetWorkoutFrequencyTrend()
    {
        var current = GetAverageWorkoutsPerWeek();
        var previous = previousStatistics.TotalWorkouts * 7.0 / selectedTimeRange;
        
        if (current > previous * 1.1) return "Trending up üìà";
        if (current < previous * 0.9) return "Trending down üìâ";
        return "Steady üìä";
    }

    private string GetWorkoutFrequencyTrendClass()
    {
        var current = GetAverageWorkoutsPerWeek();
        var previous = previousStatistics.TotalWorkouts * 7.0 / selectedTimeRange;
        
        if (current > previous * 1.1) return "positive";
        if (current < previous * 0.9) return "negative";
        return "neutral";
    }

    public class TimeRangeOption
    {
        public string Text { get; set; } = "";
        public int Value { get; set; }
    }

    public class Achievement
    {
        public string Icon { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Date { get; set; }
    }
}
